package com.example.demo.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.example.demo.beans.EvenementBean;
import com.example.demo.beans.OutilBean;
import com.example.demo.beans.PublicationBean;
import com.example.demo.dao.EnseignantChercheurRepository;
import com.example.demo.dao.EtudiantRepository;
import com.example.demo.dao.MembreEvenementRepository;
import com.example.demo.dao.MembreOutilRepository;
import com.example.demo.dao.MembrePubRepository;
import com.example.demo.dao.MembreRepository;
import com.example.demo.entities.EnseignantChercheur;
import com.example.demo.entities.Etudiant;
import com.example.demo.entities.Membre;
import com.example.demo.entities.Membre_Even_Id;
import com.example.demo.entities.Membre_Evenement;
import com.example.demo.entities.Membre_Outil;
import com.example.demo.entities.Membre_Outil_Id;
import com.example.demo.entities.Membre_Pub_Id;
import com.example.demo.entities.Membre_Publication;
import com.example.demo.proxies.EvenementServiceProxy;
import com.example.demo.proxies.OutilServiceProxy;
import com.example.demo.proxies.PublicationServiceProxy;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@Service
public class MembreImpl implements IMembreService {
	MembreRepository memberRepository;
	EtudiantRepository etudiantRepository;
	EnseignantChercheurRepository enseignantChercheurRepository;
	MembrePubRepository memberpubRepository;
	MembreOutilRepository membreOutilRepository;
	OutilServiceProxy outilProxyService;
	MembreEvenementRepository membreEvenementRepository;
	EvenementServiceProxy evenementProxyService;
	PublicationServiceProxy proxy;
	
	public Membre addMember(Membre m) {
		memberRepository.save(m);
		return m;
	}
	
	public void deleteMember(Long id) {
		memberRepository.deleteById(id);
	}
	
	public Membre updateMember(Membre p) {
		return memberRepository.saveAndFlush(p);
	}
	
	public Membre findMember(Long id) {
		Membre m= (Membre)memberRepository.findById(id).get();
		return m;
	}
	
	public List<Membre> findAll(){
		return memberRepository.findAll();
	}
	
	//Filtrage par propriété
	public Membre findByCin(String cin) {
		return memberRepository.findByCin(cin);
	}
	
	public Membre findByEmail(String email) {
		return memberRepository.findByEmail(email);
	}
	
	public List<Membre> findByNom(String nom){
		return memberRepository.findByNom(nom);
	}
	
	//recherche spécifique des étudiants
	public List<Etudiant> findByDiplome(String diplome){
		return etudiantRepository.findByDiplome(diplome);
	}
	
	//recherche spécifique des enseignants
	public List<EnseignantChercheur> findByGrade(String grade){
		return enseignantChercheurRepository.findByGrade(grade);
	}
	
	public List<EnseignantChercheur> findByEtablissement(String etablissement){
		return enseignantChercheurRepository.findByEtablissement(etablissement);
	}
	
	public void affecterEtudiantToEnseignant(Long id_ens, Long id_etd) {
		Etudiant etd= etudiantRepository.findById(id_etd).get();
		EnseignantChercheur ens= enseignantChercheurRepository.findById(id_ens).get();
		etd.setEncadrant(ens);
		etudiantRepository.save(etd);
		
	}
	
	public List<Etudiant> findEtudiantByEncadrant(EnseignantChercheur ens){
		List<Etudiant> list= etudiantRepository.findByEncadrant(ens);
		return list;
	}
	
	public void affecterauteurTopublication(Long idauteur, Long idpub) {
		Membre mbr= memberRepository.findById(idauteur).get();
		Membre_Publication mbs= new Membre_Publication();
		mbs.setAuteur(mbr);
		mbs.setId(new Membre_Pub_Id(idpub, idauteur));
		memberpubRepository.save(mbs);
	}
	
	public List<PublicationBean> findPublicationparauteur (Long idauteur){
		List<PublicationBean> pubs=new ArrayList<PublicationBean>();
		Membre auteur= memberRepository.findById(idauteur).get();
		List< Membre_Publication> idpubs=memberpubRepository.findByAuteur(auteur);
		idpubs.forEach(s->{
		System.out.println(s);
		pubs.add(proxy.findPublicationById(s.getId().getPublication_id()));
		}
		);
		return pubs;
		
	}
	
	public void affecterauteurToOutil(Long idauteur, Long idoutil)
	{
	Membre mbr= memberRepository.findById(idauteur).get();
	Membre_Outil mbo= new Membre_Outil();
	mbo.setAuteur(mbr);
	mbo.setId(new Membre_Outil_Id(idoutil, idauteur));
	membreOutilRepository.save(mbo);
	}

	public List<OutilBean> findOutilparauteur(Long idauteur) {
		List<OutilBean> outils=new ArrayList<OutilBean>();
		Membre auteur= memberRepository.findById(idauteur).get();
		List< Membre_Outil> idoutils=membreOutilRepository.findByAuteur(auteur);
		idoutils.forEach(s->{
		System.out.println(s);
		outils.add(outilProxyService.findOutilById(s.getId().getOutil_id()));
		}
		);
		return outils;
		}

	public void affecterauteurToEvenement(Long idauteur, Long idevt) {
		Membre mbr= memberRepository.findById(idauteur).get();
		Membre_Evenement mbo= new Membre_Evenement();
		mbo.setAuteur(mbr);
		mbo.setId(new Membre_Even_Id(idevt, idauteur));
		membreEvenementRepository.save(mbo);
		
	}

	public List<EvenementBean> findEvenementparauteur(Long idauteur) {
		List<EvenementBean> evnts=new ArrayList<EvenementBean>();
		Membre auteur= memberRepository.findById(idauteur).get();
		List< Membre_Evenement> idevnts=membreEvenementRepository.findByAuteur(auteur);
		idevnts.forEach(s->{
		System.out.println(s);
		evnts.add(evenementProxyService.findEvenementById(s.getId().getEven_id()));
		}
		);
		return evnts;
	}



    @Override
    public int getNumberOfPublicationsByMember(Long memberId) {
        Membre membre = memberRepository.findById(memberId).orElse(null);

        if (membre == null) {
            return 0;
        }

        List<Membre_Publication> memberPublications = memberpubRepository.findByAuteur(membre);
        return memberPublications.size();
    }
    
    @Override
    public List<Membre> getMembersByOutil(Long outilId) {
        OutilBean outil = outilProxyService.findOutilById(outilId);

        if (outil == null) {
            // Gérer le cas où l'outil n'est pas trouvé
            return Collections.emptyList();
        }

        List<Membre_Outil> memberOutils = membreOutilRepository.findByOutil(outil);

        // Récupérer les membres associés à l'outil
        List<Membre> members = new ArrayList<>();
        memberOutils.forEach(memberOutil -> members.add(memberOutil.getUser()));

        return members;
    }
    
    @Override
    public List<Membre> getMembersByEvenement(Long evenementId) {
        EvenementBean evenement = evenementProxyService.findEvenementById(evenementId);

        if (evenement == null) {
            // Gérer le cas où l'événement n'est pas trouvé
            return Collections.emptyList();
        }

        List<Membre_Evenement> memberEvenements = membreEvenementRepository.findByEvenement(evenement);

        // Récupérer les membres associés à l'événement
        List<Membre> members = new ArrayList<>();
        memberEvenements.forEach(memberEvenement -> members.add(memberEvenement.getMember()));

        return members;
    }
    
    @Override
    public void deleteEnseignant(Long id) {
        enseignantChercheurRepository.deleteById(id);
    }
    
    @Override
    public void deleteEtudiant(Long id) {
        enseignantChercheurRepository.deleteById(id);
    }
    

    @Override
    public List<EnseignantChercheur> getAllEnseignants() {
        return enseignantChercheurRepository.findAll();
    }
    @Override
    public List<Etudiant> getAllEtudiants() {
        return etudiantRepository.FindAll();
    }
    @Override
    public  Map<String, Integer> getNbStTeachSer() {
        List<Membre> membres = findAll(); 
        Map<String, Integer> nbStTeachSer = new HashMap();

      
        for (Membre membre : membres) {
            String role = membre.getRole(); 
            nbStTeachSer.put(role, nbStTeachSer.getOrDefault(role, 0) + 1);
        }

        return nbStTeachSer;
    }
}
