package com.example.demo.controlleur;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entities.EnseignantChercheur;
import com.example.demo.entities.Etudiant;
import com.example.demo.entities.Membre;
import com.example.demo.service.IMembreService;

@RestController
@CrossOrigin("*")
public class MembreRestController {
	@Autowired
	IMembreService memberService;
	@RequestMapping(value="/membres", method=RequestMethod.GET)
	public List<Membre> findMembres (){
	return memberService.findAll();
	}
	@GetMapping(value="/membres/{id}")
	public Membre findOneMemberById(@PathVariable Long id){
	return memberService.findMember(id);
	}
	
	//http://localhost:8080/membres/search1/cin?cin=123456
	@GetMapping(value="/membres/search1/cin")
	public Membre findOneMemberByCin(@RequestParam String cin)
	{
	return memberService.findByCin(cin);
	}
	
	
	@PostMapping(value="/membres/affect-encadrant")
	public void affecterEtudiantToEncadrant(@PathVariable Long id_etd, @PathVariable Long id_ens) {
	    memberService.affecterEtudiantToEnseignant(id_etd, id_ens);
	}

	//http://localhost:8080/membres/search/email?email=etd1@gmail.com
	@GetMapping(value="/membres/search/email")
	public Membre findOneMemberByEmail(@RequestParam String email)
	{
	return memberService.findByEmail(email);
	}
	@PostMapping(value="/membres/enseignant")
	public Membre addMembre(@RequestBody EnseignantChercheur m)
	{
	return memberService.addMember(m);
	}
	@PostMapping(value="/membres/etudiant")
	public Membre addMembre(@RequestBody Etudiant e)
	{
	return memberService.addMember(e);
	}
	@DeleteMapping(value="/membres/{id}")
	public void deleteMembre(@PathVariable Long id)
	{
	memberService.deleteMember(id);
	}
	@PutMapping(value="/membres/etudiant/{id}")
	public Membre updatemembre(@PathVariable Long id, @RequestBody Etudiant p)
	{
	p.setId(id);
	return memberService.updateMember(p);
	}
	@PutMapping(value="/membres/enseignant/{id}")
	public Membre updateMembre(@PathVariable Long id, @RequestBody EnseignantChercheur p)
	{
	p.setId(id);
	return memberService.updateMember(p);
	}
	/*@GetMapping("/fullmember/{id}")
	public Membre findAFullMember(@PathVariable(name="id") Long id)
	{

	Membre mbr=memberService.findMember(id);
	mbr.setPubs(memberService.findPublicationparauteur(id));
	mbr.setOuts(memberService.findOutilparauteur(id));
	mbr.setEvents(memberService.findEvenementparauteur(id));

	return mbr;
	}
	
	@PostMapping(value="/members/affect-outil/{outilid}")
	public void affecterMemberToOutil(@RequestParam Long userid, @RequestParam Long outilid) {
	    memberService.affecterauteurToOutil(userid, outilid);
	}

	@PostMapping(value="/members/affect-event/{eventid}")
	public void affecterMembreToEvent(@RequestParam Long memberid, @RequestParam Long eventid) {
	    memberService.affecterauteurToEvenement(memberid, eventid);
	}
	
	@PostMapping(value="/members/affect-pub/{pubid}")
	public void affecterMembreToPub(@RequestParam Long memberid, @RequestParam Long pubid) {
	    memberService.affecterauteurTopublication(memberid, pubid);
	}

	 @GetMapping(value="/membres-event/{evenementId}")
	    public List<Membre> getMembersByEvenement(@PathVariable Long evenementId) {
	        return memberService.getMembersByEvenement(evenementId);
	    }

	    @GetMapping(value="/membres/numberpublications")
	    public int getNumberOfPublicationsByMember(@PathVariable Long id) {
	        return memberService.getNumberOfPublicationsByMember(id);
	    }
	    
	  /*  @GetMapping(value="/membres/membres-outil/{outilId}")
	    public List<Membre> getMembersByOutil(@PathVariable Long outilId) {
	        return memberService.getMembersByOutil(outilId);
	    }*/
	    
	    @DeleteMapping(value="/membres/enseignant/{id}/delete")
	    public void deleteEnseignant(@PathVariable Long id) {
	        memberService.deleteEnseignant(id);
	    }
	    
	    @DeleteMapping(value="/membres/etudiant/{id}/delete")
	    public void deleteEtudiant(@PathVariable Long id) {
	    	System.out.println("Deleteee");
	        memberService.deleteEtudiant(id);
	    }
	    
	    @GetMapping(value="/membres/enseignants")
	    public List<EnseignantChercheur> getAllEnseignants() {
	        return memberService.getAllEnseignants();
	    }
	    
	    @GetMapping(value="/membres/etudiants")
	    public List<Etudiant> getAllEtudiants() {
	        return memberService.getAllEtudiants();
	    }
	    
	 /*   @GetMapping("/membres/members-par-role")
	    public Map<String, Integer> getNbStTeachSer() {
	      
	            Map<String, Integer> nbStTeachSer = memberService.getNbStTeachSer();
	            return nbStTeachSer;
	        
	    }*/
}
